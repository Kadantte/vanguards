name: Composer Dependency Health Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 1'  # Run weekly on Mondays

jobs:
  dependency-check:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo

      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Check for outdated dependencies
        run: composer outdated --direct --format=json > outdated.json || echo "{}" > outdated.json

      - name: Security Check
        uses: symfonycorp/security-checker-action@v5
        id: security-check
        continue-on-error: true

      - name: Process and Output Dependency Health Results
        if: always()
        run: |
          echo "# Composer Dependency Health Report" >> $GITHUB_STEP_SUMMARY

          echo "## Outdated Packages:" >> $GITHUB_STEP_SUMMARY
          if [ -s outdated.json ] && [ "$(cat outdated.json)" != "{}" ]; then
            jq -r '.installed[] | "- \(.name) (\(.version) => \(.latest))"' outdated.json >> $GITHUB_STEP_SUMMARY
          else
            echo "No outdated packages found." >> $GITHUB_STEP_SUMMARY
          fi

          echo "## Security Vulnerabilities:" >> $GITHUB_STEP_SUMMARY
          if [ -f "${{ steps.security-check.outputs.logfile }}" ] && [ -s "${{ steps.security-check.outputs.logfile }}" ]; then
            cat ${{ steps.security-check.outputs.logfile }} >> $GITHUB_STEP_SUMMARY
          else
            echo "No security vulnerabilities detected." >> $GITHUB_STEP_SUMMARY
          fi

          echo "This report was automatically generated by the Composer Dependency Health Check workflow." >> $GITHUB_STEP_SUMMARY

      - name: Check for Critical Issues
        if: always()
        run: |
          VULNERABILITIES=$([ -f "${{ steps.security-check.outputs.logfile }}" ] && cat "${{ steps.security-check.outputs.logfile }}" | wc -l || echo "0")
          OUTDATED=$(jq '.installed | length' outdated.json)
          if [ "$VULNERABILITIES" != "0" ] || [ "$OUTDATED" != "0" ]; then
            echo "::warning::Dependency issues detected. Please check the workflow summary for details."
          fi
